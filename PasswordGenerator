/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.compscifinal;

/**
 *
 * @author CMcPhail2026
 */
import java.security.SecureRandom;

public class PasswordGenerator {
    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String NUMBERS = "0123456789";
    private static final String SYMBOLS = "!@#$%^&*()-_=+[]{};:,.<>/?";

    public static String generatePassword(int length, boolean useUpper, boolean useLower, boolean useNumbers, boolean useSymbols) {
        if (length <= 0) return "";

        StringBuilder charPool = new StringBuilder();
        if (useUpper) charPool.append(UPPERCASE);
        if (useLower) charPool.append(LOWERCASE);
        if (useNumbers) charPool.append(NUMBERS);
        if (useSymbols) charPool.append(SYMBOLS);

        if (charPool.length() == 0) {
            return "Error: Select at least one character set.";
        }

        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(charPool.length());
            password.append(charPool.charAt(randomIndex));
        }
        return password.toString();
    }

    public static String getPasswordStrength(String password, boolean hasUpper, boolean hasLower, boolean hasNum, boolean hasSym) {
        int score = 0;
        if (password == null || password.isEmpty()) return "Very Weak";

        if (password.length() >= 8) score++;
        if (password.length() >= 12) score++;
        if (hasUpper && password.matches(".*[A-Z].*")) score++; // Check if actually present
        if (hasLower && password.matches(".*[a-z].*")) score++;
        if (hasNum && password.matches(".*[0-9].*")) score++;
        if (hasSym && password.matches(".*[^A-Za-z0-9].*")) score++;


        if (score >= 5) return "Strong";
        if (score >= 3) return "Medium";
        return "Weak";
    }
}
